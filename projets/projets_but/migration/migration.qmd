---
title: "Migration de données : De SQL à NoSQL"
description: "Ce projet vise à migrer des données d'un environnement SQL vers un environnement NoSQL pour une entreprise automobile."
lang: "fr"
categories: ["SQL"]
date: "28 December 2024"
image: image_migration/couverture_migration.png
---

# Introduction

Ce projet vise à migrer des données d'un environnement SQL vers un environnement NoSQL. Concrètement, il s'agit de transférer les informations stockées dans une base de données relationnelle traditionnelle, où les données sont organisées en tables avec des relations fixes, vers une base de données NoSQL, qui offre une structure plus flexible adaptée aux données non structurées ou semi-structurées.

Nous travaillons avec les données d'une entreprise de voitures qui rencontre des problèmes avec sa base de données actuelle : les requêtes sont lentes et des défaillances serveur entraînent des pertes de données. Pour résoudre ces problèmes, nous avons décidé de passer à un environnement NoSQL. Cette technologie permet de stocker des données sous une forme non structurée, offrant ainsi plus de flexibilité et de performance. Cette migration vise à améliorer la performance des requêtes et à préparer l'infrastructure pour une croissance future.

Le dépôt GitHub contenant le rapport complet du projet, ainsi que les requêtes SQL et NoSQL associées, est disponible [ici](https://github.com/rachidsahli/Projet-but/tree/main/Migration_nosql).

# Méthodologie

## Base de données relationnelle

La base de données relationnelle initiale contient des informations sur les véhicules, les clients, les commandes, les employés... La représentation des données est claire et bien organisée. Chaque table dispose de relations avec d'autres tables, ce qui permet de structurer efficacement les informations et de faciliter les requêtes complexes.

![Schéma relationnel de la bdd initial](image_migration/schema_clasicmodel.png){fig-align="center" width="591"}

Dans un premier temps, nous avons créé des requêtes SQL sur cette base de données. Ces requêtes serviront de tests pour évaluer le succès de la migration. Nous comparerons les résultats obtenus dans la base de données relationnelle avec ceux obtenus dans la base NoSQL pour vérifier l'intégrité et la performance de la migration.

![Requêtes SQL](image_migration/exemple_requete_sql.png){fig-align="center" width="700"}

La base de données est au format `SQLite`. Nous avons importé le module `sqlite3` en Python pour établir la connexion et interagir avec la base. Ensuite, nous avons utilisé la bibliothèque Pandas et notamment sa fonction `read_sql_query()`, pour exécuter et lire les résultats des requêtes SQL.

## Algorithme de migration

Il existe plusieurs types de bases de données NoSQL (Clé-valeur, Document, Colonne et Graphe), chacun adapté à ses propres cas d’usage et ayant ses propres avantages et inconvénients, notamment en termes de scalabilité et de flexibilité. Le choix dépend donc de plusieurs facteurs clés, comme la structure des données, les exigences de performance...

En ce qui nous concerne, nous pouvons réaliser une migration vers un environnement NoSQL, car l'entreprise dispose d'une grande quantité de données structurées en constante croissance. De plus, il est possible d'améliorer significativement les performances d'accès aux données en optimisant le traitement de données plus importantes et en réduisant le temps de latence. On souhaite donc une solution qui offre plus de flexibilité et évolutivité, tout en préservant l'intégrité des données de notre base initial.

Après mûre réflexion, le format document est celui s’adaptant le mieux à notre objectif. En effet, il permet de structurer naturellement les entités de manière hiérarchique. Par exemple, un client peut être représenté par un document contenant ses commandes, chaque commande incluant les produits associés. De plus, il offre une grande flexibilité, permettant de traiter différents types de données sans modifications complexes du schéma. Enfin, il permet une scalabilité horizontale grâce à la partition de document, c-à-d si les données augmentent, on peut facilement ajouter de nouveaux serveurs pour stocker et gérer plus de documents, sans tout restructurer.

![Exemple d'une modélisation au format Document](image_migration/exemple_schema_document.png){fig-align="center"}

Ce modèle présente quelques inconvénients, notamment des performances limitées pour les requêtes complexes ou les jointures entre documents. De plus, les mises à jour simultanées de documents imbriqués peuvent être plus difficiles à gérer.

Nous avons décidé de structurer nos données autour de quatres collections : customers, payments, orders et employees.

## Script de migration

Avant de développer un script de migration, nous avons d’abord établi un pseudo-algorithme dans l'objecitf de structurer et organiser la logique de notre programme.

Ensuite, pour la migration de nos données, nous avons utilisé SQLite comme source et MongoDB comme destination, en exploitant les bibliothèques Python `sqlite3`, `pymongo` et `pandas`. Le processus inclut l'extraction des données de SQLite, leur transformation au format document compatible avec MongoDB, et leur insertion dans les collections appropriées.

# Résultats

Nous avons évalué la qualité de notre migration en exécutant les mêmes dix requêtes SQL que celles effectuées avant la migration, cette fois sur notre base de données NoSQL. Pour cela, nous avons utilisé le langage de requêtes MongoDB. Toutes les requêtes ont donné les mêmes résultats, à l’exception de la requête 10 (bonus), où nous n’avons pas pu obtenir les mêmes calculs.

# Conclusion

En conclusion, la migration des données vers MongoDB a été un succès. Nous avons pu valider la précision de notre travail en comparant les résultats de nos neuf requêtes SQL avec celles exécutées sur notre base NoSQL, et les résultats se sont révélés identiques.

Note : 19/20
